service: () -> {
    createAppointment: (record {startTime:nat64; doctorId:principal; complaint:text; hospitalId:text; specialization:text}) -> (variant {Ok:record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    createHospital: (record {country:text; province:text; city:text; postalCode:text; name:text; description:text; district:text; address:text; subDistrict:text}) -> (variant {Ok:record {id:text; country:text; province:text; city:text; postalCode:text; name:text; createdAt:nat64; description:text; district:text; updatedAt:nat64; address:text; subDistrict:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    createMedicalRecord: (record {prescription:text; patientId:principal; diagnosis:text; appointmentId:text}) -> (variant {Ok:record {id:text; doctorId:principal; prescription:text; patientId:principal; createdAt:nat64; diagnosis:text; updatedAt:nat64; appointmentId:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    createUser: (record {age:nat8; nik:text; nip:text; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; role:text; birthPlace:text; email:text; district:text; hospitalId:text; address:text; gender:text; specialization:text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}) -> (variant {Ok:record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    deleteAppointment: (text) -> (variant {Ok:record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    getAllAppointments: () -> (variant {Ok:vec record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getAllHospitals: () -> (variant {Ok:vec record {id:text; country:text; province:text; city:text; postalCode:text; name:text; createdAt:nat64; description:text; district:text; updatedAt:nat64; address:text; subDistrict:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getAllUsers: () -> (variant {Ok:vec record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getAppointment: (text) -> (variant {Ok:record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getCallerMedicalRecords: () -> (variant {Ok:vec record {id:text; doctorId:principal; prescription:text; patientId:principal; createdAt:nat64; diagnosis:text; updatedAt:nat64; appointmentId:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getCallerProfile: () -> (variant {Ok:record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getDoctorsByHospitalAndSpecialization: (text, text) -> (variant {Ok:vec record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getHospital: (text) -> (variant {Ok:record {id:text; country:text; province:text; city:text; postalCode:text; name:text; createdAt:nat64; description:text; district:text; updatedAt:nat64; address:text; subDistrict:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getPastCallerAppointments: () -> (variant {Ok:vec record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getSpecializationsByHospital: (text) -> (variant {Ok:vec text; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getUnverifiedUsers: () -> (variant {Ok:vec record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getUpcomingCallerAppointments: () -> (variant {Ok:vec record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getUpcomingDoctorAppointments: (principal) -> (variant {Ok:vec record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    getUser: (principal) -> (variant {Ok:record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}}) query;
    isCallerRegistered: () -> (bool) query;
    reviewAppointment: (text, bool) -> (variant {Ok:record {id:text; startTime:nat64; doctorId:principal; isApproved:bool; endTime:nat64; patientId:principal; createdAt:nat64; complaint:text; hospitalId:text; updatedAt:nat64; specialization:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    reviewUser: (principal, bool) -> (variant {Ok:record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
    updateSchedules: (record {schedules:vec record {startTime:text; endTime:text; isActive:bool}}) -> (variant {Ok:record {id:principal; age:nat8; nik:opt text; nip:opt text; schedules:opt vec record {startTime:text; endTime:text; isActive:bool}; bloodType:text; country:text; province:text; birthDate:nat64; city:text; postalCode:text; name:text; createdAt:nat64; role:text; birthPlace:text; email:text; district:text; hospitalId:opt text; updatedAt:nat64; isVerified:bool; address:text; gender:text; specialization:opt text; phone:text; religion:text; subDistrict:text; bloodRhesus:text}; Err:variant {NotFound:text; Unauthorized:text; InternalError:text; Forbidden:text; BadRequest:text}});
}
